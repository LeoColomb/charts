{{- if and .Values.haRaft.enabled .Values.haRaft.job.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-ha-raft-job" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: ha-raft
  {{- if or .Values.haRaft.job.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.haRaft.job.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  parallelism: {{ .Values.haRaft.job.parallelism }}
  completions: {{ .Values.haRaft.job.completions }}
  backoffLimit: {{ .Values.haRaft.job.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.haRaft.job.ttlSecondsAfterFinished }}
  template:
    metadata:
      {{- if .Values.haRaft.job.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" ( dict "value" .Values.haRaft.job.podAnnotations "context" $ ) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.haRaft.job.podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: ha-raft
    spec:
      {{- include "common.images.renderPullSecrets" (dict "images" (list .Values.image .Values.cli.image) "context" $) | nindent 6 }}
      serviceAccountName: {{ include "nso.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.haRaft.job.automountServiceAccountToken }}
      {{- if .Values.cli.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.haRaft.job.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.haRaft.job.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.haRaft.job.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.haRaft.job.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.haRaft.job.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.haRaft.job.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.tolerations "context" .) | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.haRaft.job.restartPolicy }}
      {{- if or .Values.haRaft.job.initContainers .Values.haRaft.job.waitForBackend.enabled }}
      initContainers:
        {{- if .Values.haRaft.job.waitForBackend.enabled }}
        - name: wait-for-backend
          image: {{ include "common.images.image" (dict "imageRoot" .Values.haRaft.job.waitForBackend.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.haRaft.job.waitForBackend.image.pullPolicy | quote }}
          {{- if .Values.haRaft.job.waitForBackend.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.waitForBackend.command "context" $) | nindent 10 }}
          {{- end }}
          {{- if .Values.haRaft.job.waitForBackend.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.waitForBackend.args "context" $) | nindent 10 }}
          {{- end }}
          {{- if .Values.haRaft.job.waitForBackend.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.haRaft.job.waitForBackend.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.haRaft.job.waitForBackend.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.waitForBackend.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.haRaft.job.waitForBackend.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.haRaft.job.waitForBackend.resourcesPreset) | nindent 12 }}
          {{- end }}
          env:
            - name: STATEFULSET_NAME
              value: {{ include "common.names.fullname" . }}
        {{- end }}
        {{- if .Values.haRaft.job.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ printf "%s-job" .Chart.Name | trunc 63 | trimSuffix "-" }}
          image: {{ include "nso.cli.image" . | quote }}
          imagePullPolicy: {{ .Values.cli.pullPolicy | quote }}
          {{- if .Values.cli.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.cli.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.haRaft.job.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.haRaft.job.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: NCS_IPC_ADDR
              value: "$(CISCO_NSO_SERVICE_HOST)"
            - name: NCS_IPC_PORT
              value: "$(CISCO_NSO_SERVICE_PORT_IPC)"
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.basic.existingSecret "defaultNameSuffix" "admin-basic-auth" "context" $) }}
                  key: username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.basic.existingSecret "defaultNameSuffix" "admin-basic-auth" "context" $) }}
                  key: password
            {{- if .Values.auth.ipc.enabled }}
            - name: NCS_IPC_ACCESS_FILE
              value: /var/run/secrets/ncs.cisco.com/ipc/token
            {{- end }}
            {{- if .Values.haRaft.job.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.job.extraEnvVars "context" $) | nindent 16 }}
            {{- end }}
          {{- if or .Values.haRaft.job.extraEnvVarsCM .Values.haRaft.job.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.haRaft.job.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.haRaft.job.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.haRaft.job.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.haRaft.job.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          {{- if .Values.cli.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.cli.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.cli.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.cli.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.auth.ipc.enabled }}
            - name: ipc-token
              mountPath: /var/run/secrets/ncs.cisco.com/ipc
            {{- end }}
      volumes:
        {{- if .Values.auth.ipc.enabled }}
        - name: ipc-token
          secret:
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.haRaft.existingSecret "defaultNameSuffix" "ipc-token" "context" $) }}
            defaultMode: 0244
        {{- end }}
{{- end }}
