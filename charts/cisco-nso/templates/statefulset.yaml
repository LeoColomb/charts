apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: cisco-nso
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: cisco-nso
  {{- if .Values.updateStrategy }}
  updateStrategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if .Values.haRaft.enabled }}
  serviceName: {{ printf "%s-headless" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  {{- end }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" (dict "customLabels" $podLabels "context" $) | nindent 8 }}
        app.kubernetes.io/component: cisco-nso
      {{- if or .Values.podAnnotations .Values.metrics.enabled }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.metrics.service.annotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.metrics.service.annotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- include "common.images.renderPullSecrets" (dict "images" (list .Values.image) "context" $) | nindent 6 }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.runtimeClassName }}
      runtimeClassName: {{ .Values.runtimeClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.shareProcessNamespace }}
      shareProcessNamespace: {{ .Values.shareProcessNamespace }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "cisco-nso" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "cisco-nso" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: config-volume-setup
          image: {{ include "nso.image" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              cp -pr "${NCS_CONFIG_DIR}"/* "/etc/ncs-setup/"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.volumePermissions.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: conf
              mountPath: /etc/ncs-setup
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
        - name: run-volume-permissions
          image: {{ include "nso.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              mkdir -p \
                "/nso/run/backups" \
                "/nso/run/cdb" \
                "/nso/run/packages" \
                "/nso/run/rollbacks" \
                "/nso/run/scripts" \
                "/nso/run/state" \
                "/nso/run/storedstate" \
                "/nso/run/streams" \
                "/nso/run/target"
              chown "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}" "/nso/run"
              find "/nso/run" -mindepth 1 -maxdepth 2 -not -name ".snapshot" -not -name "lost+found" | xargs -r chown -R "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}"
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.volumePermissions.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: run
              mountPath: /nso/run
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "nso.image" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecret "defaultNameSuffix" "admin" "context" $) }}
                  key: username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecret "defaultNameSuffix" "admin" "context" $) }}
                  key: password
            # - name: ADMIN_SSHKEY
            #   valueFrom:
            #     secretKeyRef:
            #       name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecret "defaultNameSuffix" "admin" "context" $) }}
            #       key: ssh-privatekey
            - name: CLI_STYLE
              value: "{{ .Values.cliStyle }}"
            - name: PAM
              value: "{{ .Values.pam }}"
            - name: AUTO_WIZARD
              value: "{{ .Values.autoWizard }}"
            - name: XPATH_TRACE
              value: "{{ .Values.xpathTrace }}"
            - name: DEVEL_LOG_LEVEL
              value: "{{ .Values.logLevel }}"
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          ports:
            - name: webui
              containerPort: {{ .Values.containerPorts.webui }}
              protocol: TCP
            - name: restconf
              containerPort: {{ .Values.containerPorts.restconf }}
              protocol: TCP
            - name: netconf
              containerPort: {{ .Values.containerPorts.netconf }}
              protocol: TCP
            - name: call-home
              containerPort: {{ .Values.containerPorts.netconfCallHome }}
              protocol: TCP
            {{- if .Values.haRaft.enabled }}
            - name: ha-raft
              containerPort: {{ .Values.containerPorts.haRaft }}
              protocol: TCP
            {{- range seq 0 29 }}
            - name: ha-raft-{{ add 4370 . }}
              containerPort: {{ add 4370 . }}
            {{- end }}
            {{- end }}
            {{- if .Values.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /login.html
              port: webui
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if and .Values.haRaft.enabled .Values.haRaft.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.haRaft.readinessProbe "context" $) | nindent 12 }}
            exec:
              command:
                - /bin/sh
                - -c
                - >-
                    echo 'show ha-raft status role' |
                    ncs_cli -u $ADMIN_USERNAME
          {{/* show ha-raft status role }}
          {{ show ha-raft status disabled-reason */}}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - /opt/ncs/current/bin/ncs_cmd
                - -c
                - get_phase
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - /opt/ncs/current/bin/ncs_cmd
                - -c
                - get_phase
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: run
              mountPath: /nso/run
            - name: backups
              mountPath: {{ default "/nso/run/backups" .Values.backups.mountPath | quote }}
            - name: packages
              mountPath: {{ default "/nso/run/packages" .Values.packages.mountPath | quote }}
            - name: logs
              mountPath: /log
            - name: secrets
              mountPath: /nso/etc/
            - name: conf
              mountPath: /etc/ncs
            - name: conf-d
              mountPath: /etc/ncs/ncs.conf.d
              readOnly: true
            - name: custom-pre-ncs-start
              mountPath: /etc/ncs/pre-ncs-start.d/50-merge-config.py
              subPath: 50-merge-config.py
            {{- range $name, $_ := .Values.customPreNcsStartScripts }}
            - name: custom-pre-ncs-start
              mountPath: {{ printf "/etc/ncs/pre-ncs-start.d/%s" $name }}
              subPath: {{ $name | quote }}
            {{- end }}
            {{- range $name, $_ := .Values.customPostNcsStartScripts }}
            - name: custom-post-ncs-start
              mountPath: {{ printf "/etc/ncs/post-ncs-start.d/%s" $name }}
              subPath: {{ $name | quote }}
            {{- end }}
            {{- if and .Values.haRaft.enabled .Values.haRaft.tls }}
            - name: nso-ha-raft-certs
              mountPath: /nso/run/backups
              readOnly: true
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: secrets
          emptyDir: {}
        - name: conf
          emptyDir: {}
        - name: backups
          emptyDir: {}
        - name: packages
          {{- if .Values.packages.enabled }}
          image:
            reference: {{ include "nso.packages.image" . }}
            pullPolicy: {{ .Values.packages.image.pullPolicy | quote }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          emptyDir:
            sizeLimit: 500Mi
        - name: conf-d
          configMap:
            name: {{ printf "%s-configuration" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
        - name: custom-pre-ncs-start
          configMap:
            name: {{ printf "%s-pre-ncs-start" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
            defaultMode: 0755
        {{- if .Values.customPostNcsStartScripts }}
        - name: custom-post-ncs-start
          configMap:
            name: {{ printf "%s-post-ncs-start" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
            defaultMode: 0755
        {{- end }}
        {{- if and .Values.haRaft.enabled .Values.haRaft.tls }}
        - name: nso-ha-raft-certs
          secret:
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.haRaft.existingSecret "defaultNameSuffix" "ha-raft-tls" "context" $) }}
            defaultMode: 0256
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: run
          persistentVolumeClaim:
            claimName: {{ tpl .Values.persistence.existingClaim . }}
  {{- else if not .Values.persistence.enabled }}
        - name: run
          emptyDir: {}
  {{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  {{- if .Values.persistentVolumeClaimRetentionPolicy.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.persistentVolumeClaimRetentionPolicy.whenScaled }}
  {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: run
        labels: {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 10 }}
        {{- if or .Values.persistence.annotations .Values.commonAnnotations }}
        {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list  .Values.persistence.annotations .Values.commonAnnotations ) "context" . ) }}
        annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
    {{- if .Values.extraVolumeClaimTemplates }}
    {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeClaimTemplates "context" $) | nindent 4 }}
    {{- end }}
  {{- end }}
