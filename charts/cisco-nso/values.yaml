## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain name
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - infinity

## @section NSO Image parameters
image:
  registry: ghcr.io
  repository: cisco-nso-prod
  ## Defaults to '{{ .Chart.AppVersion }}'
  ##
  tag: ""
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Enable debug mode
  ##
  debug: false

cli:
  image:
    registry: ghcr.io
    repository: ""
    ## Defaults to '{{ .Chart.AppVersion }}'
    ##
    tag: ""
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Enable debug mode
    ##
    debug: false
  ## K8s Security Context for backup cronjob pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param cli.podSecurityContext.enabled Enable security context for backup pods
  ## @param cli.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param cli.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param cli.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param cli.podSecurityContext.fsGroup Group ID for the backup filesystem
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## Configure container security context for backup cronjob containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param cli.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param cli.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param cli.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param cli.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param cli.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param cli.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param cli.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param cli.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param cli.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param cli.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  ## Configure resource requests and limits for backup containers
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## @param cli.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if cli.resources is set (cli.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param cli.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}

## @section NSO Packages parameters
packages:
  image:
    registry: ghcr.io
    repository: ""
    tag: ""
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
  ## @param packages.customMountPath
  ##
  customMountPath: ""

## @section NSO Configuration parameters

## NSO settings based on environment variables
## ref: https://developer.cisco.com/docs/nso/api/ncs-man-pages-volume-5/#ncs-conf

## Authentication parameters
##
auth:
  basic:
    ## @param auth.basic.username NSO Admin username
    ##
    username: admin
    ## @param auth.basic.password NSO Admin password
    ## Defaults to a random 16-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.basic.existingSecret Name of existing secret containing NSO Admin credentials
    ## NOTE: Must contain keys `username` and `password`
    ## NOTE: When set, the `auth.basic.username` and `auth.basic.password` parameters are ignored
    ##
    existingSecret: ""
  ssh:
    enabled: false
    ## @param auth.ssh.privateKey NSO Admin SSH private key
    ## Defaults to a random RSA key if not set
    ##
    privateKey: ""
    ## @param auth.existingSecret Name of existing secret containing NSO SSH credentials
    ## NOTE: Must contain key `ssh-privatekey`
    ## NOTE: When set, the `auth.ssh.privatekey` parameters are ignored
    ##
    existingSecret: ""
  ipc:
    enabled: true
    ## @param auth.ipc.token NSO IPC token
    ## Defaults to a random token if not set
    ##
    token: ""
    ## @param auth.existingSecret Name of existing secret containing NSO Admin credentials
    ## NOTE: Must contain key `token`
    ## NOTE: When set, the `auth.ipc.token` parameters are ignored
    ##
    existingSecret: ""

## Running parameters
##
ncs:
  ## @param ncs.runPath NCS_RUN_DIR
  ##
  runPath: /nso/run
  ## @param ncs.configPath NCS_CONFIG_DIR
  ##
  configPath: /etc/ncs
  ## @param ncs.logPath NCS_LOG_DIR
  ##
  logPath: /log
  ## @param ncs.extraArgs Pass additional arguments to ncs
  ## e.g. extraArgs: --with-package-reload-force (enabled by default)
  ##
  extraArgs: ""
  ## @param ncs.javaVmOptions JAVA VM Options
  ##
  javaVmOptions: ""

## Extra configuration settings
# You can pass an additional XML file to be merged with NCS configuration.
# These can be passed as arbitrary configuration values set in the chart, or
# you can load arbitrary *.conf keys from ConfigMaps and Secrets.
# extraConfig:
#   raw: |
#     <?xml version="1.0" encoding="UTF-8"?>
#     <ncs-config xmlns="http://tail-f.com/yang/tailf-ncs-config">
#       <cli>
#         <style>c</style>
#       </cli>
#     </ncs-config>
#   existingConfigMap: # pod.spec.volumes.configMap
#     name: nso-extra
#     items: []
#     optional: false
#   existingSecret: # same as pod.spec.volumes.secret
#     secretName: nso-extra
#     items: []
#     optional: false
extraConfig:
  raw: ""
  existingConfigMap: ""
  existingSecret: ""

## Enable disaster recovery by periodically backuping the database:
## - It creates a cronjob to periodically backuping the database
## - It also creates a ReadWriteMany PVC to store the backups
##
backups:
  ## @param backups.enabled Enable disaster recovery by periodically backuping the database
  ##
  enabled: false
  ## @param backups.customMountPath
  ##
  customMountPath: ""
  cronjob:
    image:
      registry: ghcr.io
      ## Defaults to main NSO image
      ##
      repository: ""
      ## Defaults to '{{ .Chart.AppVersion }}'
      ##
      tag: ""
      digest: ""
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param backups.cronjob.schedule Schedule in Cron format to save backups
    ## See https://en.wikipedia.org/wiki/Cron
    ##
    schedule: "*/30 * * * *"
    ## @param backup.cronjob.suspend
    suspend: false
    ## @param backup.cronjob.failedJobsHistoryLimit Set the cronjob parameter failedJobsHistoryLimit
    failedJobsHistoryLimit: 1
    ## @param backup.cronjob.concurrencyPolicy Set the cronjob parameter concurrencyPolicy
    concurrencyPolicy: Allow
    ## @param backup.cronjob.successfulJobsHistoryLimit Set the cronjob parameter successfulJobsHistoryLimit
    successfulJobsHistoryLimit: 3
    ## @param backups.cronjob.startingDeadlineSeconds Set the cronjob parameter startingDeadlineSeconds
    startingDeadlineSeconds: ""
    ## @param backups.cronjob.ttlSecondsAfterFinished Set the cronjob parameter ttlSecondsAfterFinished
    ttlSecondsAfterFinished: ""
    ## @param backups.cronjob.restartPolicy Set the cronjob parameter restartPolicy
    ##
    restartPolicy: OnFailure
    ## @param backups.cronjob.annotations [object] Additional custom annotations for the cronjob
    ##
    annotations: {}
    ## @param backups.cronjob.podAnnotations [object] Pod annotations for cronjob pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## K8s Security Context for backup cronjob pods
    ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param backups.cronjob.podSecurityContext.enabled Enable security context for backup pods
    ## @param backups.cronjob.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param backups.cronjob.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param backups.cronjob.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param backups.cronjob.podSecurityContext.fsGroup Group ID for the backup filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Configure container security context for backup cronjob containers
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param backups.cronjob.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param backups.cronjob.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param backups.cronjob.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param backups.cronjob.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param backups.cronjob.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param backups.cronjob.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param backups.cronjob.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param backups.cronjob.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param backups.cronjob.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param backups.cronjob.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
    ## Configure resource requests and limits for backup containers
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param backups.cronjob.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if backups.cronjob.resources is set (backups.cronjob.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "medium"
    ## @param backups.cronjob.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## @param backups.cronjob.nodeSelector Node labels for cronjob pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param backups.cronjob.tolerations Tolerations for cronjob pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param backups.cronjob.podLabels [object] Labels that will be added to pods created by cronjob
    ##
    podLabels: {}
    ## @param backups.cronjob.serviceAccountName Specifies the service account to use for disaster recovery cronjob
    ##
    serviceAccountName: ""
    ## @param backups.cronjob.automountServiceAccountToken
    ##
    automountServiceAccountToken: ""
    ## @param backups.cronjob.command Override default backup container command (useful when you want to customize the backup logic)
    ##
    command:
      - /opt/ncs/current/bin/ncs-backup
    ## @param backups.cronjob.args Override default backup container args
    ##
    args: []
  pvc:
    ## @param backups.pvc.existingClaim A manually managed Persistent Volume and Claim
    ## If defined, PVC must be created manually before volume will be bound
    ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
    ##
    existingClaim: ""
    ## @param backups.pvc.size PVC Storage Request
    ##
    size: 50Gi
    ## @param backups.pvc.accessModes Persistent Volume Access Modes
    ##
    accessModes:
      - ReadWriteMany
    ## @param backups.pvc.storageClassName Storage Class for backup volume
    ##
    storageClassName: ""
    ## @param backups.pvc.subPath Path within the volume from which to mount
    ## Useful if backups should only be stored in a subdirectory of the volume
    ##
    subPath: ""
    ## @param backups.pvc.selector Selector to match an existing Persistent Volume for WordPress data PVC
    ## If set, the PVC can't have a PV dynamically provisioned for it
    ## E.g.
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
    ## @param backups.pvc.dataSource Custom PVC data source
    ##
    dataSource: {}

## Start a new cluster restoring the data from an existing backup before bootstrapping
##
restoreFromBackup:
  ## @param restoreFromBackup.enabled Initialize new cluster recovering an existing backup
  ##
  enabled: false
  ## @param restoreFromBackup.existingClaim Existing PVC containing the NSO backup
  ##
  existingClaim: ""
  ## @param restoreFromBackup.backupFilename Backup filename
  ##
  backupFilename: ""
  ## @param restoreFromBackup.restoreConfig Restore NCS_CONFIG_DIR from the backup
  ##
  restoreConfig: false
  ## @param restoreFromBackup.image.registry [default: REGISTRY_NAME] Init container restore-backup image registry
  ## @param restoreFromBackup.image.repository [default: REPOSITORY_NAME/os-shell] Init container restore-backup image repository
  ## @skip restoreFromBackup.image.tag Init container restore-backup image tag (immutable tags are recommended)
  ## @param restoreFromBackup.image.digest Init container restore-backup image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param restoreFromBackup.image.pullPolicy Init container restore-backup image pull policy
  ## @param restoreFromBackup.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: ghcr.io
    repository: ""
    tag: ""
    digest: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Configure container security context for backup restoration containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param restoreFromBackup.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param restoreFromBackup.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param restoreFromBackup.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param restoreFromBackup.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param restoreFromBackup.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param restoreFromBackup.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param restoreFromBackup.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param restoreFromBackup.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param restoreFromBackup.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param restoreFromBackup.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  ## @param restoreFromBackup.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "small"
  ## @param restoreFromBackup.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}

## NSO HA Raft parameters
## ref: https://cisco-tailf.gitbook.io/nso-docs/administration/management/high-availability
##
haRaft:
  enabled: false
  clusterName: ""
  tls: true
  selfSigned: true
  existingSecret: ""
  extraHosts: []
  extraTls: []
  ## @param haRaft.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: local-tls
  ##     key: |-
  ##       -----BEGIN KEY-----
  ##       ...
  ##       -----END KEY-----
  ##     certificate: |-
  ##       -----BEGIN-----
  ##       ...
  ##       -----END-----
  ##
  secrets: []
  service:
    ## @param haRaft.service.annotations [object] Additional custom annotations for the service
    ##
    annotations: {}
    ## @param haRaft.service.port HA Raft server port
    ##
    port: 4369
  job:
    enabled: true
    ## @param haRaft.job.restartPolicy Set the cronjob parameter restartPolicy
    ##
    restartPolicy: OnFailure
    ## @param haRaft.job.backoffLimit Number of retries before considering a Job as failed
    ##
    backoffLimit: 1
    ## @param haRaft.job.parallelism
    ##
    parallelism: 1
    ## @param haRaft.job.completions
    ##
    completions: 1
    ## @param haRaft.job.ttlSecondsAfterFinished Enables Cleanup for Finished Jobs
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/
    ##
    ttlSecondsAfterFinished: ""
    ## @param haRaft.job.annotations [object] Additional custom annotations for the cronjob
    ##
    annotations: {}
    ## @param haRaft.job.podAnnotations [object] Pod annotations for cronjob pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param haRaft.job.nodeSelector Node labels for cronjob pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param haRaft.job.tolerations Tolerations for cronjob pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param haRaft.job.podLabels [object] Labels that will be added to pods created by cronjob
    ##
    podLabels: {}
    ## @param haRaft.job.serviceAccountName Specifies the service account to use for disaster recovery cronjob
    ##
    serviceAccountName: ""
    ## @param haRaft.job.automountServiceAccountToken
    ##
    automountServiceAccountToken: ""
    ## @param haRaft.job.command Override default backup container command (useful when you want to customize the backup logic)
    ##
    command:
      - /bin/bash
      - -exc
    ## @param haRaft.job.args Override default backup container args
    ##
    args:
      - |
        /opt/ncs/current/bin/ncs_cli \
        -C --stop-on-error \
        --user "$ADMIN_USERNAME" \
        <<EOF
        ha-raft read-only mode false
        ha-raft create-cluster
        exit
        EOF

## @section Deployment parameters

## @param replicaCount Number of replicas to deploy
## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
##
replicaCount: 1
## @param podManagementPolicy Pod management policy for the NSO statefulset
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
##
podManagementPolicy: Parallel
## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
## @param persistence.enabled Enable persistence using PVC
## @param persistence.storageClass PVC Storage Class for volume
## @param persistence.accessModes [array] PVC Access Mode for volume
## @param persistence.size PVC Storage Request for volume
## @param persistence.existingClaim Name of an existing PVC to be used
## @param persistence.annotations Annotations to add to the PVC
##
persistence:
  enabled: true
  ## Data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  existingClaim: ""
  annotations: {}
  ## @param persistence.selector Selector to match an existing Persistent Volume for WordPress data PVC
  ## If set, the PVC can't have a PV dynamically provisioned for it
  ## E.g.
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## Persistent Volume Claim Retention Policy
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
##
persistentVolumeClaimRetentionPolicy:
  ## @param persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for StatefulSet
  ##
  enabled: false
  ## @param persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
  ##
  whenScaled: Retain
  ## @param persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
  ##
  whenDeleted: Retain
## @param customPreNcsStartScripts Custom pre-ncs-start.d user scripts
## ref: https://developer.cisco.com/docs/nso/guides/#!containerized-nso/administrative-information
## NOTE: supported formats are `.sh`
## NOTE: scripts are exclusively executed during the 1st boot of the container
## e.g:
## customPreNcsStartScripts:
##   custom-pre-ncs-start.sh: |
##     #!/bin/bash
##     echo "Hello from custom-pre-ncs-start.sh"
##
customPreNcsStartScripts: {}
## @param customPostNcsStartScripts Custom post-ncs-start.d user scripts
## ref: https://developer.cisco.com/docs/nso/guides/#!containerized-nso/administrative-information
## NOTE: supported formats are `.sh`
## NOTE: scripts are exclusively executed during the 1st boot of the container
## e.g:
## customPostNcsStartScripts:
##   custom-post-ncs-start.sh: |
##     #!/bin/bash
##     echo "Hello from custom-post-ncs-start.sh"
##
customPostNcsStartScripts: {}
## @param updateStrategy.type Deployment strategy type
## @param updateStrategy.rollingUpdate Deployment rolling update configuration parameters
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## NOTE: Set it to `Recreate` if you use a PV that cannot be mounted on multiple pods
## e.g:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate
## @param schedulerName Alternate scheduler
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param master.serviceAccount.create Specifies whether a ServiceAccount should be created
## @param master.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
## @param master.serviceAccount.automountServiceAccountToken Automount service account token for the server service account
## @param master.serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
##
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}
## @param hostAliases [array] Pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param lifecycleHooks [object] Override default container hooks
##
lifecycleHooks: {}
## @param extraVolumes Optionally specify extra list of additional volumes for pods
##
extraVolumes: []
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for container(s)
##
extraVolumeMounts: []
## @param extraVolumeClaimTemplates [array] Optionally specify extra list of additional volumeClaimTemplates for etcd container(s)
##
extraVolumeClaimTemplates: []
## Container ports to open
##
containerPorts:
  ipc: 4569
  webui: 8080
  restconf: 8009
  netconf: 2023
  netconfCallHome: 4334
  haRaft: 4369
## @param extraContainerPorts Optionally specify extra list of additional ports for  container(s)
## e.g:
## extraContainerPorts:
##   - name: myservice
##     containerPort: 9090
##
extraContainerPorts: []
## @param sidecars Add additional sidecar containers to the pod
## e.g:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []
## @param initContainers Add additional init containers to the pods
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "init"']
##
initContainers: []
## @param podLabels Extra labels for pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}
## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## Container's resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge).
## This is ignored if resources is set (resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: "medium"
## Containers' resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources.limits The resources limits for the container
## @param resources.requests [object] The requested resources for the container
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}
## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled pod Security Context
## @param podSecurityContext.fsGroup Set pod Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 0
## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enabled container Security Context
## @param containerSecurityContext.runAsUser Set container Security Context runAsUser
## @param containerSecurityContext.runAsNonRoot Set container Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 0
  runAsGroup: 0
  runAsNonRoot: false
  privileged: false
  allowPrivilegeEscalation: false
  # readOnlyRootFilesystem: true => /var/run/crond.pid, /etc/logrotate.d/ncs
  readOnlyRootFilesystem: false
  capabilities:
    drop: [ALL]
  seccompProfile:
    type: RuntimeDefault
## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## Configure extra options for readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param readinessProbe.enabled Enable readinessProbe
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## Configure extra options for startupProbe probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param startupProbe.enabled Enable startupProbe
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: true
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 1
  failureThreshold: 240
  successThreshold: 1
## @param customLivenessProbe Override default liveness probe for containers
##
customLivenessProbe: {}
## @param customReadinessProbe Override default readiness probe for containers
##
customReadinessProbe: {}
## @param customStartupProbe Override default startup probe for containers
##
customStartupProbe: {}
## @param extraFlags additional command line flags
## Can be used to specify command line flags, for example:
## E.g.
## extraFlags: "--max-connect-errors=1000 --max_connections=155"
##
extraFlags: ""
## @param extraEnvVars Extra environment variables to be set on containers
## E.g.
## extraEnvVars:
##  - name: TZ
##    value: "Europe/Paris"
##
extraEnvVars: []
## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars for containers
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars for containers
##
extraEnvVarsSecret: ""
## @param extraPodSpec Optionally specify extra PodSpec for the pod(s)
##
extraPodSpec: {}
## @param extraPorts Extra ports to expose
##
extraPorts: []
## @param command Override default container command
##
command: []
## @param args Override default container args
##
args: []

## @section Traffic Exposure Parameters

## Service parameters
##
service:
  annotations: {}
  type: ClusterIP
  ipcPort: 4569
  webuiPort: 80
  restconfPort: 8009
  netconfPort: 830
  netconfCallHomePort: 4334

## Network Policies
## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Don't require server label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## server label will have network access to the ports server is listening
  ## on. When true, server will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true
  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
  ##
  allowExternalEgress: true
  ## @param networkPolicy.addExternalClientAccess Allow access from pods with client label set to "true". Ignored if `networkPolicy.allowExternal` is true.
  ##
  addExternalClientAccess: true
  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraIngress:
  ##   - ports:
  ##       - port: 1234
  ##     from:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  extraIngress: []
  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy (ignored if allowExternalEgress=true)
  ## e.g:
  ## extraEgress:
  ##   - ports:
  ##       - port: 1234
  ##     to:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  ##
  extraEgress: []
  ## @param networkPolicy.ingressPodMatchLabels [object] Labels to match to allow traffic from other pods. Ignored if `networkPolicy.allowExternal` is true.
  ## e.g:
  ## ingressPodMatchLabels:
  ##   my-client: "true"
  #
  ingressPodMatchLabels: {}
  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces. Ignored if `networkPolicy.allowExternal` is true.
  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces. Ignored if `networkPolicy.allowExternal` is true.
  ##
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

## Configure the ingress resource that allows you to access the app
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation
  ##
  enabled: false
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.hostname Default host for the ingress record
  ##
  hostname: nso.local
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {}
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Relay on cert-manager to create it by setting the corresponding annotations
  ##   - Relay on Helm to create self-signed certificates by setting `ingress.tls=true` and `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: nso.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
  ## e.g:
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls TLS configuration for additional hostname(s) to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - nso.local
  ##   secretName: nso.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set, and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set, and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: nso.local-tls
  ##     key: |-
  ##       -----BEGIN RSA KEY-----
  ##       ...
  ##       -----END RSA KEY-----
  ##     certificate: |-
  ##       -----BEGIN CERTIFICATE-----
  ##       ...
  ##       -----END CERTIFICATE-----
  ##
  secrets: []

## @section Other Parameters

## Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
##
pdb:
  ## @param pdb.create Enable/disable a Pod Disruption Budget creation for pods
  ##
  create: false
  ## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ##
  minAvailable: 1
  ## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  maxUnavailable: ""

## Autoscaling configuration
## ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/
##
autoscaling:
  ## @param autoscaling.vpa.enabled Enable VPA for %%MAIN_CONTAINER_NAME%% pods
  ## @param autoscaling.vpa.annotations Annotations for VPA resource
  ## @param autoscaling.vpa.controlledResources VPA List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
  ## @param autoscaling.vpa.maxAllowed VPA Max allowed resources for the pod
  ## @param autoscaling.vpa.minAllowed VPA Min allowed resources for the pod
  ##
  vpa:
    enabled: false
    annotations: {}
    controlledResources: []
    maxAllowed: {}
    minAllowed: {}
    ## @param autoscaling.vpa.updatePolicy.updateMode Autoscaling update policy
    ## Specifies whether recommended updates are applied when a Pod is started and whether recommended updates are applied during the life of a Pod
    ## Possible values are "Off", "Initial", "Recreate", and "Auto".
    ##
    updatePolicy:
      updateMode: Auto

## @section TLS/SSL parameters
##
## @param tls.enabled Enable TLS in Cisco NSO
## @param tls.existingSecret Existing secret that contains TLS certificates
## @param tls.certFilename The secret key from the existingSecret if 'cert' key different from the default (tls.crt)
## @param tls.certKeyFilename The secret key from the existingSecret if 'key' key different from the default (tls.key)
## @param tls.certCAFilename The secret key from the existingSecret if 'ca' key different from the default (tls.crt)
## @param tls.ca CA certificate for TLS. Ignored if `tls.existingSecret` is set
## @param tls.cert TLS certificate for Cisco NSO. Ignored if `tls.existingSecret` is set
## @param tls.key TLS key for Cisco NSO. Ignored if `tls.existingSecret` is set
##
tls:
  enabled: false
  existingSecret: ""
  certFilename: tls.crt
  certKeyFilename: tls.key
  certCAFilename: ""
  ca: ""
  cert: ""
  key: ""
  ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
  ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
  autoGenerated:
    enabled: true
    engine: helm
    ## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
    certManager:
      existingIssuer: ""
      existingIssuerKind: ""
      keySize: 2048
      keyAlgorithm: RSA
      duration: 2160h
      renewBefore: 360h

## Init containers parameters:
## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
  ##
  enabled: true
  ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
  ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
  ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
  ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
  ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r40
    digest: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.enabled Enabled init container' Security Context
  ## @param volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in init container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 0

## Sidecar containers parameters:
## statusLabeler: Enable automatic pod labeling for NSO and HA statuses.
##
statusLabeler:
  ## @param statusLabeler.enabled Enable automatic pod labeling for NSO and HA statuses.
  ##
  enabled: true
  ## @param statusLabeler.image.registry [default: REGISTRY_NAME] Init container status-labeler image registry
  ## @param statusLabeler.image.repository [default: REPOSITORY_NAME/os-shell] Init container status-labeler image repository
  ## @skip statusLabeler.image.tag Init container status-labeler image tag (immutable tags are recommended)
  ## @param statusLabeler.image.digest Init container status-labeler image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param statusLabeler.image.pullPolicy Init container status-labeler image pull policy
  ## @param statusLabeler.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: bitnami/kubectl
    tag: 1.32.3-debian-12-r1
    digest: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Configure container security context for status-labeler containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param statusLabeler.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param statusLabeler.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param statusLabeler.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param statusLabeler.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param statusLabeler.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param statusLabeler.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param statusLabeler.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param statusLabeler.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param statusLabeler.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param statusLabeler.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  ## @param statusLabeler.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if statusLabeler.resources is set (statusLabeler.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param statusLabeler.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}

## Sidecar containers parameters:
## logRotate: Enable log rotation as a parallel container.
##
logRotate:
  ## @param logRotate.enabled Enable log rotation as a parallel container
  ##
  enabled: true
  ## @param logRotate.image.registry [default: REGISTRY_NAME] Init container log-rotate image registry
  ## @param logRotate.image.repository [default: REPOSITORY_NAME/os-shell] Init container log-rotate image repository
  ## @skip logRotate.image.tag Init container log-rotate image tag (immutable tags are recommended)
  ## @param logRotate.image.digest Init container log-rotate image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param logRotate.image.pullPolicy Init container log-rotate image pull policy
  ## @param logRotate.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: imroc/logrotate
    tag: "3.21.0"
    digest: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Configure container security context for log-rotate containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param logRotate.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param logRotate.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param logRotate.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param logRotate.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param logRotate.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param logRotate.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param logRotate.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param logRotate.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param logRotate.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param logRotate.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  ## @param logRotate.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if logRotate.resources is set (logRotate.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param logRotate.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}

## RBAC configuration
##
rbac:
  ## @param rbac.create Specifies whether RBAC resources should be created
  ##
  create: true
  ## @param rbac.rules Custom RBAC rules to set
  ## e.g:
  ## rules:
  ##   - apiGroups:
  ##       - ""
  ##     resources:
  ##       - pods
  ##     verbs:
  ##       - get
  ##       - list
  ##
  rules: []

## @section Metrics Parameters

## Prometheus Exporter / Metrics configuration
##
metrics:
  ## @param metrics.enabled Enable the export of Prometheus metrics
  ##
  enabled: false
  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.annotations Additional custom annotations for the ServiceMonitor
    ##
    annotations: {}
    ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
    ##
    labels: {}
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in Prometheus
    ##
    jobLabel: ""
    ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## interval: 10s
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## scrapeTimeout: 10s
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.metricRelabelings Specify additional relabeling of metrics
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.relabelings Specify general relabeling
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
    ## selector:
    ##   prometheus: my-prometheus
    ##
    selector: {}
